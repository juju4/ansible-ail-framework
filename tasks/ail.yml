---

- name: install package dependencies
  package: name={{ ail_pkg }} state=present
  register: pkg_result
  until: pkg_result is success

- name: create ail user
  user: name="{{ ail_user }}" home="{{ ail_home }}" comment="AIL app user" shell=/bin/bash

- name: ensure right permissions for ail homedir
  file: "dest={{ ail_home }} state=directory mode=0755 owner={{ ail_user }}"

- include: ardb.yml

- name: git clone AIL
  git:
    repo: https://github.com/CIRCL/AIL-framework.git
    dest: "{{ ail_root }}"
    version: "{{ ail_version | default('v2.9') }}"
  ignore_errors: true
  become: yes
  become_user: "{{ ail_user }}"

- name: re-enable adns pip dependency
  replace:
    dest: "{{ ail_root }}/{{ ail_requirement | default('requirements.txt') }}"
    regexp: >
      ^#https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/adns-python/adns-python-1.2.1.tar.gz
    replace: >
      https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/adns-python/adns-python-1.2.1.tar.gz
    backup: yes
  when: python_bin != 'python3'

# https://travis-ci.org/juju4/ansible-ail-framework/jobs/560020454#L8358
- name: force pycountry 18.12.8
  replace:
    dest: "{{ ail_root }}/{{ ail_requirement | default('requirements.txt') }}"
    regexp: ^pycountry.*
    replace: pycountry==18.12.8
    backup: yes

# https://travis-ci.org/juju4/ansible-ail-framework/jobs/640492250#L7794
- name: Xenial | force PyMISP 2.4.119.1 (else requires python>=3.6)
  replace:
    dest: "{{ ail_root }}/{{ ail_requirement | default('requirements.txt') }}"
    regexp: ^pymisp.*
    replace: pymisp==2.4.119.1
    backup: yes
  when: ansible_distribution_release == 'xenial'

- name: Initialize python3 virtualenv
  command: "virtualenv -p {{ python_bin }} {{ ail_virtualenv }}"
  args:
    creates: "{{ ail_virtualenv }}/bin/{{ python_bin }}"

# https://github.com/ngoduykhanh/PowerDNS-Admin/pull/665
- name: Xenial | force clikit 0.4.0 (else requires python>=3.6)
  pip:
    name: clikit
    version: 0.4.0
    executable: "{{ ail_virtualenv }}/bin/pip3"
  register: pkg_result
  until: pkg_result is success
  when: ansible_distribution_release == 'xenial'

- name: Ensure pybgpranking is installed - not on pypi
  command: "{{ ail_virtualenv }}/bin/pip3 install git+https://github.com/D4-project/BGP-Ranking.git/@7e698f87366e6f99b4d0d11852737db28e3ddc62#egg=pybgpranking&subdirectory=client"
  environment:
    LC_ALL: C

# FIXME! pip fails. pip module pointing wrong pip version
#   adnsmodule.c:62:8: error: unknown type name 'PyModuleDef' => using python2 instead of python3???
- name: install pip dependencies
#  pip:
#    requirements: "{{ ail_root }}/{{ ail_requirement | default('requirements.txt') }}"
#    virtualenv: "{{ ail_virtualenv }}"
##    virtualenv_command: "virtualenv -p {{ python_bin }}"
#    virtualenv_python: "{{ python_bin }}"
  command: "{{ ail_virtualenv }}/bin/pip3 install -r {{ ail_root }}/{{ ail_requirement | default('requirements.txt') }}"
  environment:
    LC_ALL: C

- name: install pip3 dependencies
  pip:
    name: "{{ ail_pip3_deps | default([]) }}"
    executable: "{{ ail_virtualenv }}/bin/pip3"
  when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int >= 16)
  register: pkg_result
  until: pkg_result is success

- name: extra configuration for AILENV
  lineinfile: "dest={{ ail_virtualenv }}/bin/activate line={{ item }} backup=yes"
  with_items:
    - "export AIL_HOME={{ ail_root }}"
    - "export AIL_BIN={{ ail_root }}/bin"
    - "export AIL_FLASK={{ ail_root }}/var/www"
    - "export AIL_REDIS={{ ail_root }}/redis/src"
    - "export AIL_ARDB={{ ail_root }}/ardb/src"

- name: ensure appropriate directories exist
  file: "dest={{ item }} state=directory mode=0755 owner={{ ail_user }}"
  with_items:
    - "{{ ail_root }}/PASTES"
    - "{{ ail_root }}/Blooms"
    - "{{ ail_root }}/dumps"

- block:
    - name: review pystemon-feeder settings
      replace:
        dest: "{{ ail_root }}/bin/feeder/pystemon-feeder.py"
        regex: "{{ item.re }}"
        replace: "{{ item.rep }}"
        backup: yes
      with_items:
        - { re: "^r = redis.StrictRedis(host='.*', db=.*)",
            rep: "r = redis.StrictRedis(host='{{ pystemon_redis_host }}', db={{ pystemon_redis_db }})"
          }
        - { re: '^pystemonpath = ".*"', rep: "pystemonpath = \"{{ pystemon_root }}\"" }
    - name: configure pystemon-feeder in supervisor
      template:
        src: supervisor-pystemonfeeder.conf.j2
        dest: "{{ supervisor_confdir }}/pystemonfeeder.{{ supervisor_ext }}"
        mode: '0644'
      notify:
        - supervisor update
  when: ail_enable_pystemonfeeder is defined and ail_enable_pystemonfeeder

- name: Download the necessary NLTK corpora
  command: >
    {{ ail_virtualenv }}/bin/python -m textblob.download_corpora
  args:
    creates: "{{ ail_virtualenv }}/lib/python2.7/site-packages/textblob/download_corpora.py"
  environment:
    HOME: "{{ ail_root }}"
  become: yes
  become_user: "{{ ail_user }}"

- name: Download sentiment vader
  command: "{{ ail_virtualenv }}/bin/python -m nltk.downloader vader_lexicon"
  args:
    creates: "{{ ail_virtualenv }}/lib/python2.7/site-packages/textblob/en/en-lexicon.txt"
  become: yes
  become_user: "{{ ail_user }}"

- name: Download punkt
  command: "{{ ail_virtualenv }}/bin/python -m nltk.downloader punkt"
#  args:
#    creates: "{{ ail_virtualenv }}/lib/python2.7/site-packages/???"
  become: yes
  become_user: "{{ ail_user }}"

- name: Create the file all_module and update the graph in doc
  command: "{{ ail_root }}/doc/generate_modules_data_flow_graph.sh"
  become: yes
  become_user: "{{ ail_user }}"

- name: AIL <=v2.2 | Set config path
  set_fact:
    ail_config_path: "{{ ail_root }}/bin/packages/config.cfg"
  when: ail_version is defined and ('v2.2' in ail_version)
- name: AIL >v2.2 | Set config path
  set_fact:
    ail_config_path: "{{ ail_root }}/configs/core.cfg"
  when: not (ail_version is defined) or ail_version == 'HEAD' or not ('v2.2' in ail_version)
## alternative: use a template if need to modify config
- name: check if existing config
  stat:
    path: "{{ ail_config_path }}"
  register: ailcfg
- name: copy sample config
  copy:
    src: "{{ ail_config_path }}.sample"
    dest: "{{ ail_config_path }}"
    mode: '0644'
    owner: "{{ ail_user }}"
    remote_src: true
  when: not ailcfg.stat.exists

- include: ail-cert.yml
  when: not (ail_version is defined) or ail_version == 'HEAD' or not ('v2.2' in ail_version)

- name: Update python path
  replace:
    path: "{{ ail_root }}/bin/update-background.py"
    regexp: "'python'"
    replace: "'{{ ail_virtualenv }}/bin/python'"
  when: ail_version is defined and ail_version != 'v2.0'

- include: ail-update_thirdparty.yml
- include: redis-tuning.yml

- name: set ail supervisor config
  template: "src=supervisor-{{ item }}.conf.j2 dest={{ supervisor_confdir }}/{{ item }}.{{ supervisor_ext }} mode=0644"
  with_items:
    - ail
    - ail-redis6379
    - ail-redis6380
    - ail-redis6381
    - ail-redis6382
    - ail-logqueue
    - ail-queues
## Note: repeatedly output state? not sure needed as daemon
## Note2: specific file as have arguments
#    - ail-script-ModuleInformation
  notify:
    - supervisor update

- name: set ail supervisor config for script
  template:
    src: supervisor-ail-script-model.conf.j2
    dest: "{{ supervisor_confdir }}/ail-script-{{ item }}.{{ supervisor_ext }}"
    mode: '0644'
  with_items: "{{ ail_modules }}"
  notify:
    - supervisor update

- name: ensure absolute path in redis 6382 config
  replace:
    dest: "{{ ail_root }}/configs/6382.conf"
    regexp: "^dir ../dumps/"
    replace: "dir {{ ail_root }}/dumps/"
    backup: yes
# https://github.com/facebook/rocksdb/wiki/Direct-IO
# https://github.com/facebook/rocksdb/blob/aa1857e2df9251c57b9a61e1543969e9be0811bf/db/db_impl/db_impl_open.cc#L394
- name: configure use_direct_io_for_flush_and_compaction in redis 6382 config
  replace:
    dest: "{{ ail_root }}/configs/6382.conf"
    regexp: "use_direct_io_for_flush_and_compaction=.*;"
    replace: "use_direct_io_for_flush_and_compaction={{ ail_rocksdb_directio | default('false') }};"
- name: ensure absolute path in launch_queues.py
  replace:
    dest: "{{ ail_root }}/bin/launch_queues.py"
    regexp: "'./Queue"
    replace: "'{{ ail_root }}/bin/Queue"
    backup: yes
- name: check for all_modules.txt
  stat: path={{ ail_root }}/doc/all_modules.txt
  register: allmodules
- name: for ModuleInformation.py start - BUG?
  file: dest={{ ail_root }}/doc/all_modules.txt state=touch
  when: not allmodules.stat.exists

- name: disable redis upstream package service
  service: name=redis-server enabled=no state=stopped

- name: init update version
  shell: "git describe --abbrev=0 --tags | tr -d '\n' > {{ ail_root }}/update/current_version"
  args:
    creates: "{{ ail_root }}/update/current_version"

- meta: flush_handlers

- name: ensure services are enabled and started
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items: "{{Â ail_services }}"

- name: ensure supervisor programs are started (core part)
  supervisorctl:
    name: "{{ item }}"
    state: started
  with_items:
    - ail
    - ail-redis6379
    - ail-redis6381
    - ail-redis6382
    - ail-logqueue
    - ail-queues

- name: update-background
  command: >
    {{ ail_virtualenv }}/bin/python {{ ail_root }}/bin/update-background.py
  args:
    chdir: "{{ ail_root }}/bin"
    creates: /var/log/supervisor/ail-script-update-background.log
  become: yes
  become_user: "{{ ail_user }}"
  environment:
    AIL_HOME: "{{ ail_root }}"
    AIL_BIN: "{{ ail_root }}/bin"
    AIL_FLASK: "{{ ail_root }}/var/www"
    AIL_REDIS: "{{ ail_root }}/redis/src"
    PATH: "$AIL_REDIS:$AIL_HOME:$PATH"
    AILENV: "{{ ail_root }}"
  register: updatebackground
  when: ail_version is defined and ail_version != 'v2.0'

- name: update-background log
  copy:
    content: "{{ updatebackground }}"
    dest: /var/log/supervisor/ail-script-update-background.log

- name: ensure supervisor programs are started (modules)
  supervisorctl:
    name: "ail-script-{{ item }}"
    state: started
  with_items: "{{ ail_modules }}"

- name: Wait for Redis to be started
  wait_for:
    port: "{{ item }}"
    delay: 15
  with_items:
    - 6379
    - 6380
    - 6381
    - 6382
#  changed_when: false
